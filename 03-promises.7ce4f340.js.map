{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAoCA,SAASC,EAAcC,EAAUC,GAC7B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA1CFQ,SAASC,cAAc,SAI/BC,iBAAiB,UAAWC,IAC/BA,EAAEC,iBAED,IAAIC,EAAQC,SAASH,EAAEI,OAAOC,SAAShB,MAAMiB,OAC5C,MAAMC,EAAOJ,SAASH,EAAEI,OAAOC,SAASE,KAAKD,OACvCE,EAASL,SAASH,EAAEI,OAAOC,SAASG,OAAOF,OAInD,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,GAAI,EAE/BtB,EAAcsB,EAAGP,GACdQ,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MAEnBsB,EAAA1B,GAAS2B,OAAOC,QACZ,uBAAqBzB,QAAiBC,MAAU,IAGvDyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAElBsB,EAAA1B,GAAS2B,OAAOG,QACV,sBAAoB3B,QAAeC,OAAW,IAIpDa,GAASK,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\n\nconst form = document.querySelector('.form');\n\n\n\nform.addEventListener('submit', (e) => { \n  e.preventDefault();\n  \n   let delay = parseInt(e.target.elements.delay.value);\n    const step = parseInt(e.target.elements.step.value);\n    const amount = parseInt(e.target.elements.amount.value);\n  \n  \n  \n  for (let i = 1; i <= amount; i+= 1) {\n    \n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n    // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n  })\n  .catch(({ position, delay }) => {\n  //   console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay} ms`\n    );\n    \n  })\n    delay += step;\n  }\n})\n\nfunction createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay })\n        } else {\n          reject({ position, delay })\n        }\n      }, delay);\n    });\n  };\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","delay1","parseInt","target","elements","value","step","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.7ce4f340.js.map"}