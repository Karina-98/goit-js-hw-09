{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAIMC,GAFQC,SAASC,cAAc,uBACxBD,SAASC,cAAc,sBACrBD,SAASC,cAAc,yBAC1BD,SAASC,cAAc,yBA+BnC,SAASC,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAGlCH,EAAQ,CAAEH,WAAUO,MAAAN,IAGpBG,EAAO,CAAEJ,WAAUO,MAAAN,G,GAEvBA,E,CAzCSJ,SAASC,cAAc,SAI/BU,iBAAiB,UAAU,SAACC,GAC/BA,EAAEC,iBAOF,IALC,IAAIC,EAAYC,SAASH,EAAEI,OAAOC,SAASP,MAAMQ,OAC1CC,EAAWJ,SAASH,EAAEI,OAAOC,SAASG,KAAKF,OAI1CG,GAHYN,SAASH,EAAEI,OAAOC,SAASK,OAAOJ,OAG1C,GAAGG,GAAKtB,EAAOmB,MAAOG,IAEjCnB,EAAcmB,EAAGP,GAAWS,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUsB,EAAKD,EAALd,MAE5CgB,EAAA7B,GAAS8B,OAAOC,QACZ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANJ,EAAM,M,IAGrDK,OAAM,SAAAN,G,IAAGrB,EAAQqB,EAARrB,SAAU4B,EAAKP,EAALd,MAElBgB,EAAA7B,GAAS8B,OAAOK,QACV,sBAAqCH,OAAf1B,EAAS,QAAY0B,OAANE,EAAM,O,IAGjDjB,GAAaK,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst delay = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst btn = document.querySelector('button[type=\"submit\"]');\nconst form = document.querySelector('.form');\n\n\n\nform.addEventListener('submit', (e) => { \n  e.preventDefault();\n  \n   let parsDelay = parseInt(e.target.elements.delay.value);\n    const parsStep = parseInt(e.target.elements.step.value);\n    const parsAmount = parseInt(e.target.elements.amount.value);\n  \n  \n  for (let i = 1; i <= amount.value; i++) {\n    \n    createPromise(i, parsDelay).then(({ position, delay}) => {\n    // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n  })\n  .catch(({ position, delay }) => {\n  //   console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay} ms`\n    );\n  });\n    parsDelay += parsStep; \n  }\n});\n\nfunction createPromise(position, delay) { \n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n  },delay)\n};\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$amount","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay3","Promise","resolve","reject","Math","random","delay","addEventListener","e","preventDefault","parsDelay","parseInt","target","elements","value","parsStep","step","i","amount","then","param","delay1","$parcel$interopDefault","Notify","success","concat","catch","delay2","failure"],"version":3,"file":"03-promises.b4bf3ee4.js.map"}