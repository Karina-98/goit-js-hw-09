{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEcC,SAASC,cAAc,uBACxBD,SAASC,cAAc,sBADpC,MAEMC,EAASF,SAASC,cAAc,wBAC1BD,SAASC,cAAc,yBA+BnC,SAASE,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAGlCH,EAAQ,C,SAAEH,EAAUO,MAAAN,IAGpBG,EAAO,C,SAAEJ,EAAUO,MAAAN,GAAQ,GAE/BA,E,CAzCSL,SAASC,cAAc,SAI/BW,iBAAiB,UAAWC,IAC/BA,EAAEC,iBAED,IAAIC,EAAYC,SAASH,EAAEI,OAAOC,SAASP,MAAMQ,OAChD,MAAMC,EAAWJ,SAASH,EAAEI,OAAOC,SAASG,KAAKF,OAC9BH,SAASH,EAAEI,OAAOC,SAASI,OAAOH,OAGvD,IAAK,IAAII,EAAI,EAAGA,GAAKrB,EAAOiB,MAAOI,IAEjCpB,EAAcoB,EAAGR,GAAWS,MAAK,EAACpB,SAAEA,EAAUO,MAAAc,MAE5CC,EAAA5B,GAAS6B,OAAOC,QACZ,uBAAqBxB,QAAiBqB,MAAU,IAGvDI,OAAM,EAACzB,SAAEA,EAAUO,MAAAmB,MAElBJ,EAAA5B,GAAS6B,OAAOI,QACV,sBAAoB3B,QAAe0B,OAAW,IAGpDf,GAAaK,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst delay = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst btn = document.querySelector('button[type=\"submit\"]');\nconst form = document.querySelector('.form');\n\n\n\nform.addEventListener('submit', (e) => { \n  e.preventDefault();\n  \n   let parsDelay = parseInt(e.target.elements.delay.value);\n    const parsStep = parseInt(e.target.elements.step.value);\n    const parsAmount = parseInt(e.target.elements.amount.value);\n  \n  \n  for (let i = 1; i <= amount.value; i++) {\n    \n    createPromise(i, parsDelay).then(({ position, delay}) => {\n    // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n  })\n  .catch(({ position, delay }) => {\n  //   console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay} ms`\n    );\n  });\n    parsDelay += parsStep;\n  }\n});\n\nfunction createPromise(position, delay) { \n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n  },delay)\n};\n\n"],"names":["$7Y9D8","parcelRequire","document","querySelector","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay3","Promise","resolve","reject","Math","random","delay","addEventListener","e","preventDefault","parsDelay","parseInt","target","elements","value","parsStep","step","amount","i","then","delay1","$parcel$interopDefault","Notify","success","catch","delay2","failure"],"version":3,"file":"03-promises.cbd45210.js.map"}